type Query {
  feed: [Post!]!
  drafts: [Post!]!
  post(id: ID!): Post
  comment(id: ID!): Comment
  me: User
  chats: [Chat!]!
  messages: [Message!]!
  users: [User!]!
}

type Mutation {
  signup(email: String!, password: String!, name: String!): AuthPayload!
  login(email: String!, password: String!): AuthPayload!
  createDraft(title: String!, content: String!): Post!
  publish(id: ID!): Post!
  deletePost(id: ID!): Post!
  createComment(postId: ID!, content: String!): Comment!
  deleteComment(commentId: ID!): Comment!
  likePost(postId: ID!): Like!
  likeComment(commentId: ID!): Like!
  dislike(likeId: ID!): Like!

  createChat(name: String!): Chat!
  deleteChat(chatId: ID!): Chat!
  createMessage(chatId: ID!, content: String!): Message!
  deleteMessage(messageId: ID!): Message!
  editMessage(messageId: ID!, content: String!): Message!

  addtoChat(chatId: ID!, userId: ID!): Chat!
}

type Subscription {
  feedSubscription: Post
}

type AuthPayload {
  token: String!
  user: User!
}

type User {
  id: ID!
  email: String!
  name: String!
  posts: [Post!]!
  comments: [Comment!]!
  likes: [Like!]!
  myChats: [Chat!]!
  chats: [Chat!]!
  messages: [Message!]!
}

type Post {
  id: ID!
  published: Boolean!
  title: String!
  content: String!
  author: User!
  comments: [Comment!]!
  likes: [Like!]!
  userPostLikeId: ID
  isUserAuthor: Boolean!
}

type Comment {
  id: ID!
  content: String!
  author: User!
  post: Post!
  userCommentLikeId: ID
  isUserAuthor: Boolean!
  likes: [Like!]!
}

type Like {
  id: ID!
  author: User!
  post: Post
  comment: Comment
}

type Chat {
  id: ID!
  name: String!
  author: User!
  users: [User!]!
  messages: [Message!]!
  isUserAuthor: Boolean!
}

type Message {
  id: ID!
  chat: Chat! 
  author: User!
  content: String!
  isUserAuthor: Boolean!
}